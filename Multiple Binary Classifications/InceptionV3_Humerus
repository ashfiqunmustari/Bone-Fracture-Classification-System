{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1xFvwqrtGohsAhQuwG0_3wxS6u7Q-kTKd","timestamp":1673037250391}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard","accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["## **`Necessary installation`**"],"metadata":{"id":"gibuQXZYajIi"}},{"cell_type":"code","source":["!pip install tensorflow-io\n","!pip install tensorflow_addons"],"metadata":{"id":"frWuFzCx3TB5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677027872931,"user_tz":-360,"elapsed":17550,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"85ce56f7-f001-49b8-a06c-570a46b22a50"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting tensorflow-io\n","  Downloading tensorflow_io-0.30.0-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (26.9 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m26.9/26.9 MB\u001b[0m \u001b[31m30.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tensorflow-io-gcs-filesystem==0.30.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow-io) (0.30.0)\n","Installing collected packages: tensorflow-io\n","Successfully installed tensorflow-io-0.30.0\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting tensorflow_addons\n","  Downloading tensorflow_addons-0.19.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m10.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.8/dist-packages (from tensorflow_addons) (23.0)\n","Requirement already satisfied: typeguard>=2.7 in /usr/local/lib/python3.8/dist-packages (from tensorflow_addons) (2.7.1)\n","Installing collected packages: tensorflow_addons\n","Successfully installed tensorflow_addons-0.19.0\n"]}]},{"cell_type":"markdown","source":["## **`Necessary imports`**"],"metadata":{"id":"IpQgSrxTitFp"}},{"cell_type":"code","source":["import tensorflow as tf\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","import tensorflow_addons as tfa\n","import tensorflow_io as tfio\n","from tensorflow.keras.layers import *\n","from tensorflow.keras.models import *\n","from tensorflow import keras\n","\n","from tqdm import tqdm\n","import datetime\n","import os\n","\n","# Random seed fixation\n","tf.random.set_seed(666)\n","np.random.seed(666)"],"metadata":{"id":"Isox4-IYaiby"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **`Cheking tensorflow version`**"],"metadata":{"id":"_diHu_qZiw7J"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ElWLoH5mYzqV","executionInfo":{"status":"ok","timestamp":1677027876081,"user_tz":-360,"elapsed":4,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"efee88c1-2e44-4f80-f6ae-3396b50f7c94"},"outputs":[{"output_type":"stream","name":"stdout","text":["Tensorflow version: 2.11.0\n"]}],"source":["print(f\"Tensorflow version: {tf.__version__}\")"]},{"cell_type":"markdown","source":["## **`Cheking GPU avaibility`**"],"metadata":{"id":"UeqdjkwWZjIC"}},{"cell_type":"code","source":["print(\"GPU AVAILABLE\" if tf.config.list_physical_devices(\"GPU\") else \"No GPU\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L9xsfKJ3ZiUr","executionInfo":{"status":"ok","timestamp":1677027895091,"user_tz":-360,"elapsed":641,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"e4cacc71-fc62-4c57-99d9-8bcdff5c08cb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["GPU AVAILABLE\n"]}]},{"cell_type":"markdown","source":["## **`Mounting Drive`**"],"metadata":{"id":"IVcJ-olxbYaj"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/gdrive')"],"metadata":{"id":"0YKXux_la6mk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677027918276,"user_tz":-360,"elapsed":23187,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"2f6bb352-3968-47f5-92d2-91261c85c2aa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /gdrive\n"]}]},{"cell_type":"markdown","source":["## **`Data augmentation`**"],"metadata":{"id":"7DOjtnTlgqqK"}},{"cell_type":"code","source":["# function\n","import  cv2\n","import imgaug\n","import imageio\n","import os\n","import numpy as np\n","from imgaug import augmenters as iaa\n","\n","class DataAugmentation:\n","\tdef __init__(self, root_dir=\"\",output_dir=\"\"):\n","\t\tself.root_dir = root_dir\n","\t\tself.output_dir = output_dir\n","\t\tprint(\"Instance of the DataAugmentation class created\")\n","\n","\tdef augmentation_of_image(self, test_image, output_path):\n","\t\tself.test_image = test_image;\n","\t\tself.output_path = output_path;\n","\t\t#define the Augmenters\n","\n","\t\t#properties: A range of values signifies that one of these numbers is randmoly chosen for every augmentation for every batch\n","\n","\t\t# Apply affine transformations to each image.\n","\t\trotate = iaa.Affine(rotate=(-90,90));  \n","\t\tscale = iaa.Affine(scale={\"x\": (0.5, 0.9), \"y\": (0.5,0.9)}); \n","\t\ttranslation = iaa.Affine(translate_percent={\"x\": (-0.15, 0.15), \"y\": (-0.15, 0.15)});\n","\t\tshear = iaa.Affine(shear=(-2, 2)); #plagio parallhlogrammo wihthin a range (-8,8)\n","\t\tzoom = iaa.PerspectiveTransform(scale=(0.01, 0.15), keep_size=True) # do not change the output size of the image\n","\t\th_flip = iaa.Fliplr(1.0); # flip horizontally all images (100%)\n","\t\tv_flip = iaa.Flipud(1.0); #flip vertically all images\n","\t\tpadding=iaa.KeepSizeByResize(iaa.CropAndPad(percent=(0.05, 0.25)))#positive values correspond to padding 5%-25% of the image,but keeping the origial output size of the new image\n","\n","\n","\t\t#More augmentations\n","\t\tblur = iaa.GaussianBlur(sigma=(0, 1.22)) # blur images with a sigma 0-2,a number ofthis range is randomly chosen everytime.Low values suggested for this application\n","\t\tcontrast = iaa.contrast.LinearContrast((0.75, 1.5)); #change the contrast by a factor of 0.75 and 1.5 sampled randomly per image\n","\t\tcontrast_channels = iaa.LinearContrast((0.75, 1.5), per_channel=True) #and for 50% of all images also independently per channel:\n","\t\tsharpen = iaa.Sharpen(alpha=(0, 1.0), lightness=(0.75, 1.5)); #sharpen with an alpha from 0(no sharpening) - 1(full sharpening) and change the lightness form 0.75 to 1.5 \n","\t\tgauss_noise = iaa.AdditiveGaussianNoise(scale=0.111*255, per_channel=True) #some random gaussian noise might occur in cell images,especially when image quality is poor\n","\t\tlaplace_noise = iaa.AdditiveLaplaceNoise(scale=(0, 0.111*255)) #we choose to be in a small range, as it is logical for training the cell images\n","\n","\n","\t\t#Brightness \n","\t\tbrightness = iaa.Multiply((0.35,1.65)) #change brightness between 35% or 165% of the original image\n","\t\tbrightness_channels = iaa.Multiply((0.5, 1.5), per_channel=0.75) # change birghtness for 25% of images.For the remaining 75%, change it, but also channel-wise.\n","\n","\t\t#CHANNELS (RGB)=(Red,Green,Blue)\n","\t\tred =iaa.WithChannels(0, iaa.Add((10, 100))) #increase each Red-pixels value within the range 10-100\n","\t\tred_rot = iaa.WithChannels(0,iaa.Affine(rotate=(0, 45))) #rotate each image's red channel by 0-45 degrees\n","\t\tgreen= iaa.WithChannels(1, iaa.Add((10, 100)))#increase each Green-pixels value within the range 10-100\n","\t\tgreen_rot=iaa.WithChannels(1,iaa.Affine(rotate=(0, 45))) #rotate each image's green channel by 0-45 degrees\n","\t\tblue=iaa.WithChannels(2, iaa.Add((10, 100)))#increase each Blue-pixels value within the range 10-100\n","\t\tblue_rot=iaa.WithChannels(2,iaa.Affine(rotate=(0, 45))) #rotate each image's blue channel by 0-45 degrees\n","\n","\t\t#colors\n","\t\tchannel_shuffle =iaa.ChannelShuffle(1.0); #shuffle all images of the batch\n","\t\tgrayscale = iaa.Grayscale(1.0)\n","\t\thue_n_saturation = iaa.MultiplyHueAndSaturation((0.5, 1.5), per_channel=True) #change hue and saturation with this range of values for different values \n","\t\tadd_hue_saturation = iaa.AddToHueAndSaturation((-50, 50), per_channel=True) #add more hue and saturation to its pixels\n","\t\t#Quantize colors using k-Means clustering\n","\t\tkmeans_color = iaa.KMeansColorQuantization(n_colors=(4, 16)) #quantizes to k means 4 to 16 colors (randomly chosen). Quantizes colors up to 16 colors\n","\n","\t\t#Alpha Blending \n","\t\tblend =iaa.AlphaElementwise((0, 1.0), iaa.Grayscale((0,1.0))) ; #blend depending on which value is greater\n","\n","\t\t#Contrast augmentors\n","\t\tclahe = iaa.CLAHE(tile_grid_size_px=((3, 21),[0,2,3,4,5,6,7])) #create a clahe contrast augmentor H=(3,21) and W=(0,7)\n","\t\thistogram = iaa.HistogramEqualization() #performs histogram equalization\n","\n","\t\t#Augmentation list of metadata augmentors\n","\t\tOneofRed = iaa.OneOf( [red]);\n","\t\tOneofGreen = iaa.OneOf( [green] );\n","\t\tOneofBlue = iaa.OneOf( [blue]);\n","\t\tcontrast_n_shit = iaa.OneOf([contrast, brightness, brightness_channels]);\n","\t\tSomeAug = iaa.SomeOf(2,[rotate,scale, translation, shear, h_flip,v_flip],random_order=True);\n","\t\tSomeClahe = iaa.SomeOf(2, [clahe, iaa.CLAHE(clip_limit=(1, 10)),iaa.CLAHE(tile_grid_size_px=(3, 21)),iaa.GammaContrast((0.5, 2.0)), iaa.AllChannelsCLAHE() , iaa.AllChannelsCLAHE(clip_limit=(1, 10), per_channel=True)],random_order=True) #Random selection from clahe augmentors\n","\t\tedgedetection= iaa.OneOf([iaa.EdgeDetect(alpha=(0, 0.7)),iaa.DirectedEdgeDetect(alpha=(0, 0.7), direction=(0.0, 1.0))]);# Search in some images either for all edges or for directed edges.These edges are then marked in a black and white image and overlayed with the original image using an alpha of 0 to 0.7.\n","\t\tcanny_filter = iaa.OneOf([iaa.Canny(), iaa.Canny(alpha=(0.5, 1.0), sobel_kernel_size=[3, 7])]); #choose one of the 2 canny filter options\n","\t\tOneofNoise = iaa.OneOf([blur, gauss_noise, laplace_noise])\n","\t\tColor_1 = iaa.OneOf([channel_shuffle,grayscale, hue_n_saturation , add_hue_saturation, kmeans_color]);\n","\t\tColor_2 = iaa.OneOf([channel_shuffle,grayscale, hue_n_saturation , add_hue_saturation, kmeans_color]);\n","\t\tFlip = iaa.OneOf([histogram , v_flip, h_flip]);\n","\n","\t\t#Define the augmentors used in the DA\n","\t\tAugmentors= [SomeAug, SomeClahe, edgedetection, canny_filter, Color_1, contrast_n_shit]\n","\n","\n","\t\tfor i in range(0,6):\n","\t\t\timg = cv2.imread(test_image) #read you image\n","\t\t\timages = np.array([img for _ in range(6)], dtype=np.uint8)  # 12 is the size of the array that will hold 8 different images\n","\t\t\timages_aug = Augmentors[i].augment_images(images)  #alternate between the different augmentors for a test image\n","\t\t\tcv2.imwrite(os.path.join(output_path,test_image +\"new\"+str(i)+'.png'), images_aug[i])  #write all changed images\n","\t\t\t"],"metadata":{"id":"PcT_Z3lkgg4a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import shutil\n","class DataAugmentation_Extension:\n","    def __init__(self, directory=\"\"):\n","      self.directory = directory\n","      print(\"Instance of DataAugmentation_Extension class created\")\n","    def printnow(self, dir):\n","      pass\n","      # print(\"Just testing that the method calling is working \"+ dir)\n","    \n","    def extend_dataset(self, directory):\n","      # print(\"HEY\")\n","      library_augment= DataAugmentation();\n","      self.directory = directory \n","\n","      if not os.path.exists(self.directory):\n","        print(\"ERROR! Couldn't find directory!\")\n","      else:\n","        print(\"Directory exists\")\n","      class_path = directory\n","      class_files = [class_path+name for name in os.listdir(class_path)]\n","      # print(class_files) #call augmentation for all class_files\n","      for i in range(len(class_files)):\n","        library_augment.augmentation_of_image(class_files[i], class_path)\n","        "],"metadata":{"id":"PBmTgQGDg1f6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def augment_data(Bone, Type):\n","  Sets = [\"Train\", \"Valid\"]\n","  for Set in Sets: \n","    target_directory = \"/gdrive/MyDrive/BoneFractureWork/OurDataset/\"+Bone+\"/\"+Type+\"/\"+Set+\"/\"\n","    #create an instance of the class\n","    datasetda = DataAugmentation_Extension()\n","    datasetda.extend_dataset(target_directory)"],"metadata":{"id":"M2983J9_g8Yp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# augment_data(\"Humerus\", \"Positive\")\n","# augment_data(\"Humerus\", \"Negative\")"],"metadata":{"id":"6mVFKgtWhi6h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(os.listdir(\"/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/\")), len(os.listdir(\"/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Valid/\")), len(os.listdir(\"/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/\")), len(os.listdir(\"/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Valid/\"))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"id":"LDQMKfhap1lJ","executionInfo":{"status":"error","timestamp":1677027979630,"user_tz":-360,"elapsed":59184,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"8ac1a184-0c3e-4fea-de13-c6abbfd4cbd8"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-a29a3675c3f7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Valid/\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Valid/\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["# os.listdir(\"/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/\")"],"metadata":{"id":"gNtG1rntr6T5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# !unzip /content/drive/MyDrive/BoneFractureWork/MURA-v1.1.zip"],"metadata":{"id":"uDXcjyyOsf17"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train_csv = pd.read_csv(\"/content/drive/MyDrive/BoneFractureWork/OurDataset/Elbow/Train_Elbow.csv\")\n","# Train_csv.head()"],"metadata":{"id":"9N7vNMt1a6mq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train_images_paths = [f_names for f_names in Train_csv[\"Train_Paths\"]]\n","# print(f\"The total number of train images: {len(Train_images_paths)}\")"],"metadata":{"id":"XlmBm63Ue5TI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Valid_csv = pd.read_csv(\"/content/drive/MyDrive/BoneFractureWork/OurDataset/Elbow/Valid_Elbow.csv\")"],"metadata":{"id":"liNuIMCOHWEl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Valid_csv.count()"],"metadata":{"id":"fJohvWL52fOf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def different(bone, which_set):\n","\n","  P = list()\n","  N = list()\n","  Pos_dir = \"/gdrive/MyDrive/BoneFractureWork/OurDataset/\"+bone+\"/Positive/\"+which_set+\"/\"\n","  Neg_dir = \"/gdrive/MyDrive/BoneFractureWork/OurDataset/\"+bone+\"/Negative/\"+which_set+\"/\"\n","\n","  P.extend([Pos_dir+path, \"Fractured \"+bone] for path in os.listdir(Pos_dir))\n","  N.extend([Neg_dir+path, \"Non-fractured \"+bone] for path in os.listdir(Neg_dir))\n","  \n","  return P,N"],"metadata":{"id":"d8rWtm94h41i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Set_creation(which_set):  \n","\n","  print(f\"{which_set}:----\")\n","  Humerus_P, Humerus_N = different(\"Humerus\", which_set)\n","\n","  IMAGES_AND_LABELS = []\n","\n","  IMAGES_AND_LABELS.extend(batch for batch in Humerus_P)\n","  IMAGES_AND_LABELS.extend(batch for batch in Humerus_N)\n","\n","  return IMAGES_AND_LABELS"],"metadata":{"id":"C8uxOPH7h5mx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["TRAIN_IMAGES_AND_LABELS = Set_creation(\"Train\")\n","VALID_IMAGES_AND_LABELS = Set_creation(\"Valid\")"],"metadata":{"id":"pxadKPmsiPhh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677027995234,"user_tz":-360,"elapsed":5855,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"b81668d8-fdf6-4f74-d065-eca32367a5b6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train:----\n","Valid:----\n"]}]},{"cell_type":"code","source":["IMAGES_AND_LABELS = TRAIN_IMAGES_AND_LABELS + VALID_IMAGES_AND_LABELS"],"metadata":{"id":"t-v-r7nu8guN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(IMAGES_AND_LABELS)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U_tZ9wDA87id","executionInfo":{"status":"ok","timestamp":1677027995235,"user_tz":-360,"elapsed":4,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"a135e78c-acc0-40d3-eb57-0b06e6354121"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["10750"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["# def List_append(path, Positive, Negative):\n","#   if \"Positive\" in path:\n","#     Positive.append(path)\n","#   else:\n","#     Negative.append(path)"],"metadata":{"id":"Q70Pf5pSURkr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# def Split_View_creation(Image_paths, Term):\n","\n","#   Elbow_P = list()\n","#   Elbow_N = list()\n","\n","#   # Appending different classes images into their own list names\n","#   for i in range(len(Image_paths)):\n","\n","#     path = Image_paths[i]\n","    \n","#     if \"Elbow\" in path:\n","#       List_append(path, Elbow_P, Elbow_N)\n","\n","#   # Creating a dictionary of the image numbers in respective classes\n","#   Multi_class_dic = {\n","#       \"Fractured\": [len(Elbow_P)],\n","#       \"Non-Fractured\": [len(Elbow_N)],\n","#       \"Total\": [len(Elbow_P)+len(Elbow_N)]\n","#   }\n","\n","#   Index = [\"Elbow\"]\n","\n","#   # The dataframe creation\n","#   Multi_class_frame = pd.DataFrame(data = Multi_class_dic, index = Index)\n","\n","#   # Viewing the dataframe\n","#   print(f\"The {Term} dataset splitting: \")\n","#   print(f\"{Multi_class_frame}\")\n","#   # Multi_class_frame\n","\n","#   # Creation of a list consisting of images and it's corresponding labels\n","#   IMAGES_AND_LABELS = [ [f_paths,\"Fractured Elbow\"] for f_paths in Elbow_P]\n","#   [IMAGES_AND_LABELS.append([f_paths,\"Non-Fractured Elbow\"]) for f_paths in Elbow_N]\n","\n","#   return IMAGES_AND_LABELS\n"],"metadata":{"id":"72z18inKW7Jr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Train\n","\n","# Train_images_paths = [f_names for f_names in Train_csv[\"Train_Paths\"]]\n","# TRAIN_IMAGES_AND_LABELS = Split_View_creation(Train_images_paths, \"Train\")\n","\n","# # TRAIN_IMAGES_AND_LABELS[:5]"],"metadata":{"id":"0lZ8QUPILJXz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Valid and Test\n","# ValidandTest_images_paths = [f_names for f_names in Valid_csv[\"Valid_Paths\"]]\n","# VALIDandTEST_IMAGES_AND_LABELS = Split_View_creation(ValidandTest_images_paths, \"Valid & Test\")\n","\n","# # VALIDandTEST_IMAGES_AND_LABELS[:5]"],"metadata":{"id":"ybpOlmtzLJbT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# dir = \"/content/drive/MyDrive/BoneFractureWork/OurDataset/\"\n","# bone = \"Elbow\"\n","# which_set = \"Train\"\n","# # for os.listdir(dir+bone+\"/Positive/\"+which_set+\"/\")\n","# IMAGES = []\n","# IMAGES.extend(dir+bone+\"/Positive/\"+which_set+\"/\"+path for path in os.listdir(dir+bone+\"/Positive/\"+which_set+\"/\"))\n","# IMAGES.extend(dir+bone+\"/Negative/\"+which_set+\"/\"+path for path in os.listdir(dir+bone+\"/Negative/\"+which_set+\"/\"))\n","\n","# data = {\n","#     \"Train_Paths\" : IMAGES    \n","# }\n","\n","# train_frame = pd.DataFrame(data = data)\n","# train_frame.to_csv(dir+bone+\"/\"+\"Train_\"+bone+\".csv\")\n","\n","\n","# IMAGES = []\n","# which_set = \"Valid\"\n","# IMAGES.extend(dir+bone+\"/Positive/\"+which_set+\"/\"+path for path in os.listdir(dir+bone+\"/Positive/\"+which_set+\"/\"))\n","# IMAGES.extend(dir+bone+\"/Negative/\"+which_set+\"/\"+path for path in os.listdir(dir+bone+\"/Negative/\"+which_set+\"/\"))\n","\n","\n","# data = {\n","#     \"Valid_Paths\" : IMAGES    \n","# }\n","\n","# train_frame = pd.DataFrame(data = data)\n","# train_frame.to_csv(dir+bone+\"/\"+\"Valid_\"+bone+\".csv\")"],"metadata":{"id":"jQvnJn9C35AH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# import random\n","# tf.random.set_seed(67)\n","# # Shuffling the lists.\n","# random.shuffle(IMAGES_AND_LABELS)\n","# # random.shuffle(VALIDandTEST_IMAGES_AND_LABELS)"],"metadata":{"id":"Y40UqUShLJeD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["IMAGES = []\n","LABELS = []\n","\n","for i in range(len(IMAGES_AND_LABELS)):\n","  IMAGES.append(IMAGES_AND_LABELS[i][0])\n","  LABELS.append(IMAGES_AND_LABELS[i][1])\n","\n","# VALID_IMAGES = []\n","# VALID_LABELS = []\n","\n","# for i in range(len(VALID_IMAGES_AND_LABELS)):\n","#   VALID_IMAGES.append(VALID_IMAGES_AND_LABELS[i][0])\n","#   VALID_LABELS.append(VALID_IMAGES_AND_LABELS[i][1])\n","\n","# TEST_IMAGES = []\n","# TEST_LABELS = []\n","\n","# for i in range(len(TEST_IMAGES_AND_LABELS)):\n","#   TEST_IMAGES.append(TEST_IMAGES_AND_LABELS[i][0])\n","#   TEST_LABELS.append(TEST_IMAGES_AND_LABELS[i][1])\n"],"metadata":{"id":"iqtl4QRzUhaL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn import preprocessing\n","\n","La_encoder = preprocessing.LabelEncoder()\n","\n","La_encoder.fit(LABELS)\n","OHC_LABELS = La_encoder.transform(LABELS)\n","OHC_LABELS = np.reshape(OHC_LABELS, (OHC_LABELS.size, 1))\n","\n","# La_encoder.fit(VALID_LABELS)\n","# VALID_OHC_LABELS = La_encoder.transform(VALID_LABELS)\n","# VALID_OHC_LABELS = np.reshape(VALID_OHC_LABELS, (VALID_OHC_LABELS.size, 1))\n","\n","# La_encoder.fit(TEST_LABELS)\n","# TEST_OHC_LABELS = La_encoder.transform(TEST_LABELS)\n","# TEST_OHC_LABELS = np.reshape(TEST_OHC_LABELS, (TEST_OHC_LABELS.size, 1))\n"],"metadata":{"id":"UCxR33veC1RK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# from IPython.display import Image\n","\n","# r = np.random.randint(0, len(TRAIN_IMAGES)+1)\n"],"metadata":{"id":"p31_YZ7IUhw7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# OHC_LABELS"],"metadata":{"id":"clowIf1Y__IM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **`Preparing the data`**"],"metadata":{"id":"Kjvpt0J0o5GK"}},{"cell_type":"code","source":["# La_encoder.classes_"],"metadata":{"id":"JWzESTHc6rag"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# BOOL_LABELS"],"metadata":{"id":"3QAyicc8-mVN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# LABELS[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"nDImYX3AMHEK","executionInfo":{"status":"ok","timestamp":1675946492241,"user_tz":-360,"elapsed":4,"user":{"displayName":"Neloy.","userId":"12580598278832678789"}},"outputId":"7bcafb02-3a96-478a-a994-f5c0ca488f9c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Fractured Humerus'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["BOOL_LABELS = []\n","for i in range(len(LABELS)):\n","  BOOL_LABELS.append(La_encoder.classes_ == np.array(LABELS[i]))\n","\n","# VALID_BOOL_LABELS = []\n","# for i in range(len(VALID_LABELS)):\n","#   VALID_BOOL_LABELS.append(La_encoder.classes_ == np.array(VALID_LABELS[i]))\n","\n","\n","# TEST_BOOL_LABELS = []\n","# for i in range(len(TEST_LABELS)):\n","#   TEST_BOOL_LABELS.append(La_encoder.classes_ == np.array(TEST_LABELS[i]))"],"metadata":{"id":"A2pMIq6M650_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_val_test, Y_train, Y_val_test = train_test_split(IMAGES, BOOL_LABELS, train_size=0.9, shuffle=True, stratify = BOOL_LABELS, random_state = 53)\n","X_val, X_test, Y_val, Y_test = train_test_split(X_val_test, Y_val_test, test_size=0.7, shuffle=True, stratify = Y_val_test, random_state = 53)"],"metadata":{"id":"1sj_KJXD9tvW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(X_train), len(X_val), len(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PG-66E7I-6v1","executionInfo":{"status":"ok","timestamp":1677028006597,"user_tz":-360,"elapsed":3,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"a1f3eebc-192b-4a3d-f7d2-d2330180a57a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(9675, 322, 753)"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["## **`Necessary initializations`**"],"metadata":{"id":"_YLPKV9y61nQ"}},{"cell_type":"code","source":["IMG_SIZE = 300\n","\n","NUMBER_OF_CHANNELS = 3\n","\n","INPUT_SHAPE = [IMG_SIZE, IMG_SIZE, 3]\n","\n","OUTPUT_SHAPE = len(La_encoder.classes_)\n","\n","LR = 0.0001\n","\n","BATCH_SIZE = 64\n","\n","Unique_labels = La_encoder.classes_\n","\n","EPOCHS = 10"],"metadata":{"id":"_AfOxZZCYtg6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def preprocess_image(filepath):\n","  \n","  image = tf.io.read_file(filepath)\n","  image = tf.io.decode_png(image, channels=3)\n","  image = tf.image.convert_image_dtype(image, tf.float32)\n","  image = tf.image.resize(image, [IMG_SIZE, IMG_SIZE])\n","\n","  return image"],"metadata":{"id":"Ei9_VgJAnc9h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_image_and_label(X, Y):\n","  \n","  image = preprocess_image(X)\n","  label = Y\n","\n","  return image, label"],"metadata":{"id":"ShZ-XK2SV4Fl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **`Creation of databatches`**"],"metadata":{"id":"kxVWDaaMY0xx"}},{"cell_type":"code","source":["def create_databatches(X, Y=None, test_data = False, cross_train = False,val_data = False, batch_size=BATCH_SIZE):\n","\n","  if test_data:\n","    print(\"Creation of test databatches..\")\n","    data = tf.data.Dataset.from_tensor_slices((tf.constant(X)))\n","    data_batch = data.map(preprocess_image).batch(batch_size)\n","  \n","  elif val_data or cross_train:\n","    if val_data: \n","      print(\"Creation of valid databatches..\")\n","    else:\n","      print(\"Creation of cross entropy databatches..\")\n","    data = tf.data.Dataset.from_tensor_slices((tf.constant(X), tf.constant(Y)))\n","    data = data.shuffle(buffer_size = len(X))\n","    data_batch = data.map(get_image_and_label).batch(batch_size)\n","  \n","  else:\n","    print(\"Creation of train databatches..\")\n","    data = tf.data.Dataset.from_tensor_slices((tf.constant(X), tf.constant(Y)))\n","    data = data.shuffle(buffer_size = len(X))\n","    data_batch = data.map(get_image_and_label).batch(batch_size)\n","  \n","  return data_batch\n"],"metadata":{"id":"1AP1FZ9MT44Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_ds = create_databatches(X_train, Y_train)\n","val_ds = create_databatches(X_val, Y_val, val_data = True)\n","test_ds = create_databatches(X_test, Y_test, test_data = True)"],"metadata":{"id":"X3p5uRC-VQi1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677028014907,"user_tz":-360,"elapsed":6,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"d51ea918-ffb1-442b-dea1-698ba38f6bc3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Creation of train databatches..\n","Creation of valid databatches..\n","Creation of test databatches..\n"]}]},{"cell_type":"code","source":["train_ds.element_spec, val_ds.element_spec, test_ds.element_spec"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IXRTTxrwV7Td","executionInfo":{"status":"ok","timestamp":1677028014907,"user_tz":-360,"elapsed":5,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"a14a46bd-e166-4e9c-bf4b-2ef985ade658"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((TensorSpec(shape=(None, 300, 300, 3), dtype=tf.float32, name=None),\n","  TensorSpec(shape=(None, 2), dtype=tf.bool, name=None)),\n"," (TensorSpec(shape=(None, 300, 300, 3), dtype=tf.float32, name=None),\n","  TensorSpec(shape=(None, 2), dtype=tf.bool, name=None)),\n"," TensorSpec(shape=(None, 300, 300, 3), dtype=tf.float32, name=None))"]},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","source":["## **`Save model`**"],"metadata":{"id":"Nox_4RwJxGm_"}},{"cell_type":"code","source":["def save_model(model, suffix = None):\n","\n","  model_path = os.path.join(\"/gdrive/MyDrive/BoneFractureWork/Saved_models/New/Models/\"+suffix, datetime.datetime.now().strftime(\"%Y_%m_%d-%H_%M_%S\"))\n","  model_dir = model_path + \".h5\"\n","\n","  model.save(filepath = model_dir)\n","\n","  return model_dir"],"metadata":{"id":"v3urPwwvxGHJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **`Load Model`**"],"metadata":{"id":"BOaQs2ICxvez"}},{"cell_type":"code","source":["def load_model(FilePath):\n","  \n","  model = tf.keras.models.load_model(\n","      filepath = FilePath\n","  )\n","  \n","  return model"],"metadata":{"id":"fFc9ZlG0xusj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **`Confusion Matrix`**"],"metadata":{"id":"DoPFUl3Gx20y"}},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n","\n","def Confusion_matrix(Y_true, Y_pred, Labels, suffix):\n","\n","  c_m = confusion_matrix(Y_true, Y_pred)\n","\n","  Cm_Df = pd.DataFrame(c_m, index = Labels, columns = Labels)\n","\n","  # fig, ax = plt.subplots(figsize = (5,5))\n","\n","  # ax = sns.heatmap(\n","  #     Cm_Df,\n","  #     cbar = False,\n","  #     cmap = \"gnuplot\",\n","  #     annot = True,\n","  #     linewidth = 3,\n","  #     annot_kws = {\n","  #         'fontsize' : 20\n","  #     }\n","  # )\n","\n","  # # plt.suptitle(f\"Confusion matrix for {suffix}\", fontsize=20)\n","  # plt.suptitle(f\"{suffix}\", fontsize=15, color = 'purple',fontweight=\"bold\")\n","  # plt.xlabel(\"Actual Values\", fontsize=15)\n","  # plt.ylabel(\"Predicted Values\", fontsize=15)\n","  print(f\"{Cm_Df}\")\n","  # plt.show()\n"],"metadata":{"id":"_jR9n8NSx16C"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **`Accuracy`**"],"metadata":{"id":"GMTdpjUcx856"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score\n","\n","def model_accuracy(Y_true, Y_pred, suffix):\n","\n","  Accuracy = accuracy_score(Y_true, Y_pred) * 100\n","  print(f\"\\n{suffix} Model's Accuracy: {Accuracy:.2f}%\\n\")\n","  "],"metadata":{"id":"2XIVCyBPx8pa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **`Classification report`**"],"metadata":{"id":"x0A1x8wUyFAr"}},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","\n","def model_classification_report(Y_true, Y_pred, suffix):\n","\n","  c_r = classification_report(Y_true, Y_pred)\n","  # CR_DF = pd.DataFrame(c_r).transpose()\n","  \n","  print(f\"\\n{suffix}'s Model's classification report: \\n\")\n","  print(f\"{c_r}\")\n"],"metadata":{"id":"4Uew_90oyEhL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **`Evaluate the model`**"],"metadata":{"id":"o4-g_wmmyKjz"}},{"cell_type":"code","source":["def Model_Evaluation(Y_true, Y_pred, Labels, suffix):\n","\n","  model_accuracy(Y_true, Y_pred, suffix)\n","\n","  Confusion_matrix(Y_true, Y_pred, Labels, suffix)\n","\n","  model_classification_report(Y_true, Y_pred, suffix)\n"],"metadata":{"id":"UY4Hik1HyKDU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **`Callbacks`**"],"metadata":{"id":"uBJz1QOLdpFS"}},{"cell_type":"code","source":["# Callbacks\n","\n","import datetime\n","%load_ext tensorboard\n","\n","def Callbacks(suffix):\n","\n","  logdir = os.path.join(\"/gdrive/MyDrive/BoneFractureWork/Saved_models/New/Tensorboard_logs/\"+suffix, datetime.datetime.now().strftime(\"%Y_%m_%d-%H_%M_%S\"))\n","\n","  tensorboard_callback = tf.keras.callbacks.TensorBoard(logdir) \n","\n","  earlystopping_callback = tf.keras.callbacks.EarlyStopping( monitor = \"val_loss\", patience = 3, verbose = 1, mode = \"min\")\n","\n","  reducelroplateau_callback = tf.keras.callbacks.ReduceLROnPlateau( monitr = \"val_loss\", factor = 0.2, patience = 8, min_lr = 1e-5)\n","\n","  checkpoint_dir = os.path.join(\"/gdrive/MyDrive/BoneFractureWork/Saved_models/New/Checkpoints/\"+suffix, datetime.datetime.now().strftime(\"%Y_%m_%d-%H_%M_%S\"))\n","  \n","  File_path = checkpoint_dir+\".hdf5\"\n","\n","  modelcheckpoint_callback = tf.keras.callbacks.ModelCheckpoint( filepath = File_path, monitor = \"val_accuracy\", mode = \"max\", verbose = 1, save_best_only = True)\n","\n","  Callbacks = [tensorboard_callback, reducelroplateau_callback, modelcheckpoint_callback]\n","\n","  # Callbacks = [ tensorboard_callback, reducelroplateau_callback ]\n","\n","  # Callbacks = [tensorboard_callback]\n","\n","  return Callbacks\n"],"metadata":{"id":"Lc66uoQg3VzS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def model_compile(model, input_shape):\n","    \n","    model.compile(\n","      optimizer = tf.keras.optimizers.Adam(learning_rate = 1e-4),\n","      loss = tf.keras.losses.BinaryCrossentropy(),\n","      metrics = [\"accuracy\"]\n","    )\n","\n","    model.build(input_shape)\n","\n","    return model"],"metadata":{"id":"g-9MTP5le9_x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def preprocess_layers(x, output_shape = OUTPUT_SHAPE):\n","\n","  x = tf.keras.layers.GlobalAveragePooling2D()(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","  x = tf.keras.layers.Dropout(0.5)(x)\n","  x = tf.keras.layers.Dense(512, activation = \"relu\")(x)\n","  x = tf.keras.layers.Dropout(0.5)(x)\n","  x = tf.keras.layers.Dense( units = output_shape , activation='softmax')(x)\n","\n","  return x"],"metadata":{"id":"db20ffqLezF1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","from keras.applications import InceptionV3\n","\n","def create_InceptionV3(input_shape = INPUT_SHAPE, output_shape = OUTPUT_SHAPE):\n","\n","  Inputs = tf.keras.Input(input_shape)\n","  \n","  inceptionv3 = InceptionV3( weights = \"imagenet\", include_top = False, input_tensor = Inputs )\n","  inceptionv3.trainable = False\n","\n","  for i in range(258, 311):\n","    inceptionv3.layers[i].trainable = True\n","   \n","  x = inceptionv3.output\n","  x = preprocess_layers(x, output_shape)\n","  model = tf.keras.Model(Inputs, x, name='InceptionV3')\n","\n","  return model_compile(model, input_shape) \n","  "],"metadata":{"id":"6LiWIePeezCi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Model_InceptionV3 = create_InceptionV3()\n","Model_InceptionV3.summary()"],"metadata":{"id":"1QUkSXGWey_C","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677028040031,"user_tz":-360,"elapsed":12348,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"f1e9de0c-90f7-4a4c-f54e-a0c5f353fd0c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","87910968/87910968 [==============================] - 5s 0us/step\n","Model: \"InceptionV3\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_1 (InputLayer)           [(None, 300, 300, 3  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," conv2d (Conv2D)                (None, 149, 149, 32  864         ['input_1[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," batch_normalization (BatchNorm  (None, 149, 149, 32  96         ['conv2d[0][0]']                 \n"," alization)                     )                                                                 \n","                                                                                                  \n"," activation (Activation)        (None, 149, 149, 32  0           ['batch_normalization[0][0]']    \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_1 (Conv2D)              (None, 147, 147, 32  9216        ['activation[0][0]']             \n","                                )                                                                 \n","                                                                                                  \n"," batch_normalization_1 (BatchNo  (None, 147, 147, 32  96         ['conv2d_1[0][0]']               \n"," rmalization)                   )                                                                 \n","                                                                                                  \n"," activation_1 (Activation)      (None, 147, 147, 32  0           ['batch_normalization_1[0][0]']  \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_2 (Conv2D)              (None, 147, 147, 64  18432       ['activation_1[0][0]']           \n","                                )                                                                 \n","                                                                                                  \n"," batch_normalization_2 (BatchNo  (None, 147, 147, 64  192        ['conv2d_2[0][0]']               \n"," rmalization)                   )                                                                 \n","                                                                                                  \n"," activation_2 (Activation)      (None, 147, 147, 64  0           ['batch_normalization_2[0][0]']  \n","                                )                                                                 \n","                                                                                                  \n"," max_pooling2d (MaxPooling2D)   (None, 73, 73, 64)   0           ['activation_2[0][0]']           \n","                                                                                                  \n"," conv2d_3 (Conv2D)              (None, 73, 73, 80)   5120        ['max_pooling2d[0][0]']          \n","                                                                                                  \n"," batch_normalization_3 (BatchNo  (None, 73, 73, 80)  240         ['conv2d_3[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_3 (Activation)      (None, 73, 73, 80)   0           ['batch_normalization_3[0][0]']  \n","                                                                                                  \n"," conv2d_4 (Conv2D)              (None, 71, 71, 192)  138240      ['activation_3[0][0]']           \n","                                                                                                  \n"," batch_normalization_4 (BatchNo  (None, 71, 71, 192)  576        ['conv2d_4[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_4 (Activation)      (None, 71, 71, 192)  0           ['batch_normalization_4[0][0]']  \n","                                                                                                  \n"," max_pooling2d_1 (MaxPooling2D)  (None, 35, 35, 192)  0          ['activation_4[0][0]']           \n","                                                                                                  \n"," conv2d_8 (Conv2D)              (None, 35, 35, 64)   12288       ['max_pooling2d_1[0][0]']        \n","                                                                                                  \n"," batch_normalization_8 (BatchNo  (None, 35, 35, 64)  192         ['conv2d_8[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_8 (Activation)      (None, 35, 35, 64)   0           ['batch_normalization_8[0][0]']  \n","                                                                                                  \n"," conv2d_6 (Conv2D)              (None, 35, 35, 48)   9216        ['max_pooling2d_1[0][0]']        \n","                                                                                                  \n"," conv2d_9 (Conv2D)              (None, 35, 35, 96)   55296       ['activation_8[0][0]']           \n","                                                                                                  \n"," batch_normalization_6 (BatchNo  (None, 35, 35, 48)  144         ['conv2d_6[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," batch_normalization_9 (BatchNo  (None, 35, 35, 96)  288         ['conv2d_9[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_6 (Activation)      (None, 35, 35, 48)   0           ['batch_normalization_6[0][0]']  \n","                                                                                                  \n"," activation_9 (Activation)      (None, 35, 35, 96)   0           ['batch_normalization_9[0][0]']  \n","                                                                                                  \n"," average_pooling2d (AveragePool  (None, 35, 35, 192)  0          ['max_pooling2d_1[0][0]']        \n"," ing2D)                                                                                           \n","                                                                                                  \n"," conv2d_5 (Conv2D)              (None, 35, 35, 64)   12288       ['max_pooling2d_1[0][0]']        \n","                                                                                                  \n"," conv2d_7 (Conv2D)              (None, 35, 35, 64)   76800       ['activation_6[0][0]']           \n","                                                                                                  \n"," conv2d_10 (Conv2D)             (None, 35, 35, 96)   82944       ['activation_9[0][0]']           \n","                                                                                                  \n"," conv2d_11 (Conv2D)             (None, 35, 35, 32)   6144        ['average_pooling2d[0][0]']      \n","                                                                                                  \n"," batch_normalization_5 (BatchNo  (None, 35, 35, 64)  192         ['conv2d_5[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," batch_normalization_7 (BatchNo  (None, 35, 35, 64)  192         ['conv2d_7[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," batch_normalization_10 (BatchN  (None, 35, 35, 96)  288         ['conv2d_10[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_11 (BatchN  (None, 35, 35, 32)  96          ['conv2d_11[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_5 (Activation)      (None, 35, 35, 64)   0           ['batch_normalization_5[0][0]']  \n","                                                                                                  \n"," activation_7 (Activation)      (None, 35, 35, 64)   0           ['batch_normalization_7[0][0]']  \n","                                                                                                  \n"," activation_10 (Activation)     (None, 35, 35, 96)   0           ['batch_normalization_10[0][0]'] \n","                                                                                                  \n"," activation_11 (Activation)     (None, 35, 35, 32)   0           ['batch_normalization_11[0][0]'] \n","                                                                                                  \n"," mixed0 (Concatenate)           (None, 35, 35, 256)  0           ['activation_5[0][0]',           \n","                                                                  'activation_7[0][0]',           \n","                                                                  'activation_10[0][0]',          \n","                                                                  'activation_11[0][0]']          \n","                                                                                                  \n"," conv2d_15 (Conv2D)             (None, 35, 35, 64)   16384       ['mixed0[0][0]']                 \n","                                                                                                  \n"," batch_normalization_15 (BatchN  (None, 35, 35, 64)  192         ['conv2d_15[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_15 (Activation)     (None, 35, 35, 64)   0           ['batch_normalization_15[0][0]'] \n","                                                                                                  \n"," conv2d_13 (Conv2D)             (None, 35, 35, 48)   12288       ['mixed0[0][0]']                 \n","                                                                                                  \n"," conv2d_16 (Conv2D)             (None, 35, 35, 96)   55296       ['activation_15[0][0]']          \n","                                                                                                  \n"," batch_normalization_13 (BatchN  (None, 35, 35, 48)  144         ['conv2d_13[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_16 (BatchN  (None, 35, 35, 96)  288         ['conv2d_16[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_13 (Activation)     (None, 35, 35, 48)   0           ['batch_normalization_13[0][0]'] \n","                                                                                                  \n"," activation_16 (Activation)     (None, 35, 35, 96)   0           ['batch_normalization_16[0][0]'] \n","                                                                                                  \n"," average_pooling2d_1 (AveragePo  (None, 35, 35, 256)  0          ['mixed0[0][0]']                 \n"," oling2D)                                                                                         \n","                                                                                                  \n"," conv2d_12 (Conv2D)             (None, 35, 35, 64)   16384       ['mixed0[0][0]']                 \n","                                                                                                  \n"," conv2d_14 (Conv2D)             (None, 35, 35, 64)   76800       ['activation_13[0][0]']          \n","                                                                                                  \n"," conv2d_17 (Conv2D)             (None, 35, 35, 96)   82944       ['activation_16[0][0]']          \n","                                                                                                  \n"," conv2d_18 (Conv2D)             (None, 35, 35, 64)   16384       ['average_pooling2d_1[0][0]']    \n","                                                                                                  \n"," batch_normalization_12 (BatchN  (None, 35, 35, 64)  192         ['conv2d_12[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_14 (BatchN  (None, 35, 35, 64)  192         ['conv2d_14[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_17 (BatchN  (None, 35, 35, 96)  288         ['conv2d_17[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_18 (BatchN  (None, 35, 35, 64)  192         ['conv2d_18[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_12 (Activation)     (None, 35, 35, 64)   0           ['batch_normalization_12[0][0]'] \n","                                                                                                  \n"," activation_14 (Activation)     (None, 35, 35, 64)   0           ['batch_normalization_14[0][0]'] \n","                                                                                                  \n"," activation_17 (Activation)     (None, 35, 35, 96)   0           ['batch_normalization_17[0][0]'] \n","                                                                                                  \n"," activation_18 (Activation)     (None, 35, 35, 64)   0           ['batch_normalization_18[0][0]'] \n","                                                                                                  \n"," mixed1 (Concatenate)           (None, 35, 35, 288)  0           ['activation_12[0][0]',          \n","                                                                  'activation_14[0][0]',          \n","                                                                  'activation_17[0][0]',          \n","                                                                  'activation_18[0][0]']          \n","                                                                                                  \n"," conv2d_22 (Conv2D)             (None, 35, 35, 64)   18432       ['mixed1[0][0]']                 \n","                                                                                                  \n"," batch_normalization_22 (BatchN  (None, 35, 35, 64)  192         ['conv2d_22[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_22 (Activation)     (None, 35, 35, 64)   0           ['batch_normalization_22[0][0]'] \n","                                                                                                  \n"," conv2d_20 (Conv2D)             (None, 35, 35, 48)   13824       ['mixed1[0][0]']                 \n","                                                                                                  \n"," conv2d_23 (Conv2D)             (None, 35, 35, 96)   55296       ['activation_22[0][0]']          \n","                                                                                                  \n"," batch_normalization_20 (BatchN  (None, 35, 35, 48)  144         ['conv2d_20[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_23 (BatchN  (None, 35, 35, 96)  288         ['conv2d_23[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_20 (Activation)     (None, 35, 35, 48)   0           ['batch_normalization_20[0][0]'] \n","                                                                                                  \n"," activation_23 (Activation)     (None, 35, 35, 96)   0           ['batch_normalization_23[0][0]'] \n","                                                                                                  \n"," average_pooling2d_2 (AveragePo  (None, 35, 35, 288)  0          ['mixed1[0][0]']                 \n"," oling2D)                                                                                         \n","                                                                                                  \n"," conv2d_19 (Conv2D)             (None, 35, 35, 64)   18432       ['mixed1[0][0]']                 \n","                                                                                                  \n"," conv2d_21 (Conv2D)             (None, 35, 35, 64)   76800       ['activation_20[0][0]']          \n","                                                                                                  \n"," conv2d_24 (Conv2D)             (None, 35, 35, 96)   82944       ['activation_23[0][0]']          \n","                                                                                                  \n"," conv2d_25 (Conv2D)             (None, 35, 35, 64)   18432       ['average_pooling2d_2[0][0]']    \n","                                                                                                  \n"," batch_normalization_19 (BatchN  (None, 35, 35, 64)  192         ['conv2d_19[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_21 (BatchN  (None, 35, 35, 64)  192         ['conv2d_21[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_24 (BatchN  (None, 35, 35, 96)  288         ['conv2d_24[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_25 (BatchN  (None, 35, 35, 64)  192         ['conv2d_25[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_19 (Activation)     (None, 35, 35, 64)   0           ['batch_normalization_19[0][0]'] \n","                                                                                                  \n"," activation_21 (Activation)     (None, 35, 35, 64)   0           ['batch_normalization_21[0][0]'] \n","                                                                                                  \n"," activation_24 (Activation)     (None, 35, 35, 96)   0           ['batch_normalization_24[0][0]'] \n","                                                                                                  \n"," activation_25 (Activation)     (None, 35, 35, 64)   0           ['batch_normalization_25[0][0]'] \n","                                                                                                  \n"," mixed2 (Concatenate)           (None, 35, 35, 288)  0           ['activation_19[0][0]',          \n","                                                                  'activation_21[0][0]',          \n","                                                                  'activation_24[0][0]',          \n","                                                                  'activation_25[0][0]']          \n","                                                                                                  \n"," conv2d_27 (Conv2D)             (None, 35, 35, 64)   18432       ['mixed2[0][0]']                 \n","                                                                                                  \n"," batch_normalization_27 (BatchN  (None, 35, 35, 64)  192         ['conv2d_27[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_27 (Activation)     (None, 35, 35, 64)   0           ['batch_normalization_27[0][0]'] \n","                                                                                                  \n"," conv2d_28 (Conv2D)             (None, 35, 35, 96)   55296       ['activation_27[0][0]']          \n","                                                                                                  \n"," batch_normalization_28 (BatchN  (None, 35, 35, 96)  288         ['conv2d_28[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_28 (Activation)     (None, 35, 35, 96)   0           ['batch_normalization_28[0][0]'] \n","                                                                                                  \n"," conv2d_26 (Conv2D)             (None, 17, 17, 384)  995328      ['mixed2[0][0]']                 \n","                                                                                                  \n"," conv2d_29 (Conv2D)             (None, 17, 17, 96)   82944       ['activation_28[0][0]']          \n","                                                                                                  \n"," batch_normalization_26 (BatchN  (None, 17, 17, 384)  1152       ['conv2d_26[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_29 (BatchN  (None, 17, 17, 96)  288         ['conv2d_29[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_26 (Activation)     (None, 17, 17, 384)  0           ['batch_normalization_26[0][0]'] \n","                                                                                                  \n"," activation_29 (Activation)     (None, 17, 17, 96)   0           ['batch_normalization_29[0][0]'] \n","                                                                                                  \n"," max_pooling2d_2 (MaxPooling2D)  (None, 17, 17, 288)  0          ['mixed2[0][0]']                 \n","                                                                                                  \n"," mixed3 (Concatenate)           (None, 17, 17, 768)  0           ['activation_26[0][0]',          \n","                                                                  'activation_29[0][0]',          \n","                                                                  'max_pooling2d_2[0][0]']        \n","                                                                                                  \n"," conv2d_34 (Conv2D)             (None, 17, 17, 128)  98304       ['mixed3[0][0]']                 \n","                                                                                                  \n"," batch_normalization_34 (BatchN  (None, 17, 17, 128)  384        ['conv2d_34[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_34 (Activation)     (None, 17, 17, 128)  0           ['batch_normalization_34[0][0]'] \n","                                                                                                  \n"," conv2d_35 (Conv2D)             (None, 17, 17, 128)  114688      ['activation_34[0][0]']          \n","                                                                                                  \n"," batch_normalization_35 (BatchN  (None, 17, 17, 128)  384        ['conv2d_35[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_35 (Activation)     (None, 17, 17, 128)  0           ['batch_normalization_35[0][0]'] \n","                                                                                                  \n"," conv2d_31 (Conv2D)             (None, 17, 17, 128)  98304       ['mixed3[0][0]']                 \n","                                                                                                  \n"," conv2d_36 (Conv2D)             (None, 17, 17, 128)  114688      ['activation_35[0][0]']          \n","                                                                                                  \n"," batch_normalization_31 (BatchN  (None, 17, 17, 128)  384        ['conv2d_31[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_36 (BatchN  (None, 17, 17, 128)  384        ['conv2d_36[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_31 (Activation)     (None, 17, 17, 128)  0           ['batch_normalization_31[0][0]'] \n","                                                                                                  \n"," activation_36 (Activation)     (None, 17, 17, 128)  0           ['batch_normalization_36[0][0]'] \n","                                                                                                  \n"," conv2d_32 (Conv2D)             (None, 17, 17, 128)  114688      ['activation_31[0][0]']          \n","                                                                                                  \n"," conv2d_37 (Conv2D)             (None, 17, 17, 128)  114688      ['activation_36[0][0]']          \n","                                                                                                  \n"," batch_normalization_32 (BatchN  (None, 17, 17, 128)  384        ['conv2d_32[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_37 (BatchN  (None, 17, 17, 128)  384        ['conv2d_37[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_32 (Activation)     (None, 17, 17, 128)  0           ['batch_normalization_32[0][0]'] \n","                                                                                                  \n"," activation_37 (Activation)     (None, 17, 17, 128)  0           ['batch_normalization_37[0][0]'] \n","                                                                                                  \n"," average_pooling2d_3 (AveragePo  (None, 17, 17, 768)  0          ['mixed3[0][0]']                 \n"," oling2D)                                                                                         \n","                                                                                                  \n"," conv2d_30 (Conv2D)             (None, 17, 17, 192)  147456      ['mixed3[0][0]']                 \n","                                                                                                  \n"," conv2d_33 (Conv2D)             (None, 17, 17, 192)  172032      ['activation_32[0][0]']          \n","                                                                                                  \n"," conv2d_38 (Conv2D)             (None, 17, 17, 192)  172032      ['activation_37[0][0]']          \n","                                                                                                  \n"," conv2d_39 (Conv2D)             (None, 17, 17, 192)  147456      ['average_pooling2d_3[0][0]']    \n","                                                                                                  \n"," batch_normalization_30 (BatchN  (None, 17, 17, 192)  576        ['conv2d_30[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_33 (BatchN  (None, 17, 17, 192)  576        ['conv2d_33[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_38 (BatchN  (None, 17, 17, 192)  576        ['conv2d_38[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_39 (BatchN  (None, 17, 17, 192)  576        ['conv2d_39[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_30 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_30[0][0]'] \n","                                                                                                  \n"," activation_33 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_33[0][0]'] \n","                                                                                                  \n"," activation_38 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_38[0][0]'] \n","                                                                                                  \n"," activation_39 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_39[0][0]'] \n","                                                                                                  \n"," mixed4 (Concatenate)           (None, 17, 17, 768)  0           ['activation_30[0][0]',          \n","                                                                  'activation_33[0][0]',          \n","                                                                  'activation_38[0][0]',          \n","                                                                  'activation_39[0][0]']          \n","                                                                                                  \n"," conv2d_44 (Conv2D)             (None, 17, 17, 160)  122880      ['mixed4[0][0]']                 \n","                                                                                                  \n"," batch_normalization_44 (BatchN  (None, 17, 17, 160)  480        ['conv2d_44[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_44 (Activation)     (None, 17, 17, 160)  0           ['batch_normalization_44[0][0]'] \n","                                                                                                  \n"," conv2d_45 (Conv2D)             (None, 17, 17, 160)  179200      ['activation_44[0][0]']          \n","                                                                                                  \n"," batch_normalization_45 (BatchN  (None, 17, 17, 160)  480        ['conv2d_45[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_45 (Activation)     (None, 17, 17, 160)  0           ['batch_normalization_45[0][0]'] \n","                                                                                                  \n"," conv2d_41 (Conv2D)             (None, 17, 17, 160)  122880      ['mixed4[0][0]']                 \n","                                                                                                  \n"," conv2d_46 (Conv2D)             (None, 17, 17, 160)  179200      ['activation_45[0][0]']          \n","                                                                                                  \n"," batch_normalization_41 (BatchN  (None, 17, 17, 160)  480        ['conv2d_41[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_46 (BatchN  (None, 17, 17, 160)  480        ['conv2d_46[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_41 (Activation)     (None, 17, 17, 160)  0           ['batch_normalization_41[0][0]'] \n","                                                                                                  \n"," activation_46 (Activation)     (None, 17, 17, 160)  0           ['batch_normalization_46[0][0]'] \n","                                                                                                  \n"," conv2d_42 (Conv2D)             (None, 17, 17, 160)  179200      ['activation_41[0][0]']          \n","                                                                                                  \n"," conv2d_47 (Conv2D)             (None, 17, 17, 160)  179200      ['activation_46[0][0]']          \n","                                                                                                  \n"," batch_normalization_42 (BatchN  (None, 17, 17, 160)  480        ['conv2d_42[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_47 (BatchN  (None, 17, 17, 160)  480        ['conv2d_47[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_42 (Activation)     (None, 17, 17, 160)  0           ['batch_normalization_42[0][0]'] \n","                                                                                                  \n"," activation_47 (Activation)     (None, 17, 17, 160)  0           ['batch_normalization_47[0][0]'] \n","                                                                                                  \n"," average_pooling2d_4 (AveragePo  (None, 17, 17, 768)  0          ['mixed4[0][0]']                 \n"," oling2D)                                                                                         \n","                                                                                                  \n"," conv2d_40 (Conv2D)             (None, 17, 17, 192)  147456      ['mixed4[0][0]']                 \n","                                                                                                  \n"," conv2d_43 (Conv2D)             (None, 17, 17, 192)  215040      ['activation_42[0][0]']          \n","                                                                                                  \n"," conv2d_48 (Conv2D)             (None, 17, 17, 192)  215040      ['activation_47[0][0]']          \n","                                                                                                  \n"," conv2d_49 (Conv2D)             (None, 17, 17, 192)  147456      ['average_pooling2d_4[0][0]']    \n","                                                                                                  \n"," batch_normalization_40 (BatchN  (None, 17, 17, 192)  576        ['conv2d_40[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_43 (BatchN  (None, 17, 17, 192)  576        ['conv2d_43[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_48 (BatchN  (None, 17, 17, 192)  576        ['conv2d_48[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_49 (BatchN  (None, 17, 17, 192)  576        ['conv2d_49[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_40 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_40[0][0]'] \n","                                                                                                  \n"," activation_43 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_43[0][0]'] \n","                                                                                                  \n"," activation_48 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_48[0][0]'] \n","                                                                                                  \n"," activation_49 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_49[0][0]'] \n","                                                                                                  \n"," mixed5 (Concatenate)           (None, 17, 17, 768)  0           ['activation_40[0][0]',          \n","                                                                  'activation_43[0][0]',          \n","                                                                  'activation_48[0][0]',          \n","                                                                  'activation_49[0][0]']          \n","                                                                                                  \n"," conv2d_54 (Conv2D)             (None, 17, 17, 160)  122880      ['mixed5[0][0]']                 \n","                                                                                                  \n"," batch_normalization_54 (BatchN  (None, 17, 17, 160)  480        ['conv2d_54[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_54 (Activation)     (None, 17, 17, 160)  0           ['batch_normalization_54[0][0]'] \n","                                                                                                  \n"," conv2d_55 (Conv2D)             (None, 17, 17, 160)  179200      ['activation_54[0][0]']          \n","                                                                                                  \n"," batch_normalization_55 (BatchN  (None, 17, 17, 160)  480        ['conv2d_55[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_55 (Activation)     (None, 17, 17, 160)  0           ['batch_normalization_55[0][0]'] \n","                                                                                                  \n"," conv2d_51 (Conv2D)             (None, 17, 17, 160)  122880      ['mixed5[0][0]']                 \n","                                                                                                  \n"," conv2d_56 (Conv2D)             (None, 17, 17, 160)  179200      ['activation_55[0][0]']          \n","                                                                                                  \n"," batch_normalization_51 (BatchN  (None, 17, 17, 160)  480        ['conv2d_51[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_56 (BatchN  (None, 17, 17, 160)  480        ['conv2d_56[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_51 (Activation)     (None, 17, 17, 160)  0           ['batch_normalization_51[0][0]'] \n","                                                                                                  \n"," activation_56 (Activation)     (None, 17, 17, 160)  0           ['batch_normalization_56[0][0]'] \n","                                                                                                  \n"," conv2d_52 (Conv2D)             (None, 17, 17, 160)  179200      ['activation_51[0][0]']          \n","                                                                                                  \n"," conv2d_57 (Conv2D)             (None, 17, 17, 160)  179200      ['activation_56[0][0]']          \n","                                                                                                  \n"," batch_normalization_52 (BatchN  (None, 17, 17, 160)  480        ['conv2d_52[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_57 (BatchN  (None, 17, 17, 160)  480        ['conv2d_57[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_52 (Activation)     (None, 17, 17, 160)  0           ['batch_normalization_52[0][0]'] \n","                                                                                                  \n"," activation_57 (Activation)     (None, 17, 17, 160)  0           ['batch_normalization_57[0][0]'] \n","                                                                                                  \n"," average_pooling2d_5 (AveragePo  (None, 17, 17, 768)  0          ['mixed5[0][0]']                 \n"," oling2D)                                                                                         \n","                                                                                                  \n"," conv2d_50 (Conv2D)             (None, 17, 17, 192)  147456      ['mixed5[0][0]']                 \n","                                                                                                  \n"," conv2d_53 (Conv2D)             (None, 17, 17, 192)  215040      ['activation_52[0][0]']          \n","                                                                                                  \n"," conv2d_58 (Conv2D)             (None, 17, 17, 192)  215040      ['activation_57[0][0]']          \n","                                                                                                  \n"," conv2d_59 (Conv2D)             (None, 17, 17, 192)  147456      ['average_pooling2d_5[0][0]']    \n","                                                                                                  \n"," batch_normalization_50 (BatchN  (None, 17, 17, 192)  576        ['conv2d_50[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_53 (BatchN  (None, 17, 17, 192)  576        ['conv2d_53[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_58 (BatchN  (None, 17, 17, 192)  576        ['conv2d_58[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_59 (BatchN  (None, 17, 17, 192)  576        ['conv2d_59[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_50 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_50[0][0]'] \n","                                                                                                  \n"," activation_53 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_53[0][0]'] \n","                                                                                                  \n"," activation_58 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_58[0][0]'] \n","                                                                                                  \n"," activation_59 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_59[0][0]'] \n","                                                                                                  \n"," mixed6 (Concatenate)           (None, 17, 17, 768)  0           ['activation_50[0][0]',          \n","                                                                  'activation_53[0][0]',          \n","                                                                  'activation_58[0][0]',          \n","                                                                  'activation_59[0][0]']          \n","                                                                                                  \n"," conv2d_64 (Conv2D)             (None, 17, 17, 192)  147456      ['mixed6[0][0]']                 \n","                                                                                                  \n"," batch_normalization_64 (BatchN  (None, 17, 17, 192)  576        ['conv2d_64[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_64 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_64[0][0]'] \n","                                                                                                  \n"," conv2d_65 (Conv2D)             (None, 17, 17, 192)  258048      ['activation_64[0][0]']          \n","                                                                                                  \n"," batch_normalization_65 (BatchN  (None, 17, 17, 192)  576        ['conv2d_65[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_65 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_65[0][0]'] \n","                                                                                                  \n"," conv2d_61 (Conv2D)             (None, 17, 17, 192)  147456      ['mixed6[0][0]']                 \n","                                                                                                  \n"," conv2d_66 (Conv2D)             (None, 17, 17, 192)  258048      ['activation_65[0][0]']          \n","                                                                                                  \n"," batch_normalization_61 (BatchN  (None, 17, 17, 192)  576        ['conv2d_61[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_66 (BatchN  (None, 17, 17, 192)  576        ['conv2d_66[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_61 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_61[0][0]'] \n","                                                                                                  \n"," activation_66 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_66[0][0]'] \n","                                                                                                  \n"," conv2d_62 (Conv2D)             (None, 17, 17, 192)  258048      ['activation_61[0][0]']          \n","                                                                                                  \n"," conv2d_67 (Conv2D)             (None, 17, 17, 192)  258048      ['activation_66[0][0]']          \n","                                                                                                  \n"," batch_normalization_62 (BatchN  (None, 17, 17, 192)  576        ['conv2d_62[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_67 (BatchN  (None, 17, 17, 192)  576        ['conv2d_67[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_62 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_62[0][0]'] \n","                                                                                                  \n"," activation_67 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_67[0][0]'] \n","                                                                                                  \n"," average_pooling2d_6 (AveragePo  (None, 17, 17, 768)  0          ['mixed6[0][0]']                 \n"," oling2D)                                                                                         \n","                                                                                                  \n"," conv2d_60 (Conv2D)             (None, 17, 17, 192)  147456      ['mixed6[0][0]']                 \n","                                                                                                  \n"," conv2d_63 (Conv2D)             (None, 17, 17, 192)  258048      ['activation_62[0][0]']          \n","                                                                                                  \n"," conv2d_68 (Conv2D)             (None, 17, 17, 192)  258048      ['activation_67[0][0]']          \n","                                                                                                  \n"," conv2d_69 (Conv2D)             (None, 17, 17, 192)  147456      ['average_pooling2d_6[0][0]']    \n","                                                                                                  \n"," batch_normalization_60 (BatchN  (None, 17, 17, 192)  576        ['conv2d_60[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_63 (BatchN  (None, 17, 17, 192)  576        ['conv2d_63[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_68 (BatchN  (None, 17, 17, 192)  576        ['conv2d_68[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_69 (BatchN  (None, 17, 17, 192)  576        ['conv2d_69[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_60 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_60[0][0]'] \n","                                                                                                  \n"," activation_63 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_63[0][0]'] \n","                                                                                                  \n"," activation_68 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_68[0][0]'] \n","                                                                                                  \n"," activation_69 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_69[0][0]'] \n","                                                                                                  \n"," mixed7 (Concatenate)           (None, 17, 17, 768)  0           ['activation_60[0][0]',          \n","                                                                  'activation_63[0][0]',          \n","                                                                  'activation_68[0][0]',          \n","                                                                  'activation_69[0][0]']          \n","                                                                                                  \n"," conv2d_72 (Conv2D)             (None, 17, 17, 192)  147456      ['mixed7[0][0]']                 \n","                                                                                                  \n"," batch_normalization_72 (BatchN  (None, 17, 17, 192)  576        ['conv2d_72[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_72 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_72[0][0]'] \n","                                                                                                  \n"," conv2d_73 (Conv2D)             (None, 17, 17, 192)  258048      ['activation_72[0][0]']          \n","                                                                                                  \n"," batch_normalization_73 (BatchN  (None, 17, 17, 192)  576        ['conv2d_73[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_73 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_73[0][0]'] \n","                                                                                                  \n"," conv2d_70 (Conv2D)             (None, 17, 17, 192)  147456      ['mixed7[0][0]']                 \n","                                                                                                  \n"," conv2d_74 (Conv2D)             (None, 17, 17, 192)  258048      ['activation_73[0][0]']          \n","                                                                                                  \n"," batch_normalization_70 (BatchN  (None, 17, 17, 192)  576        ['conv2d_70[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_74 (BatchN  (None, 17, 17, 192)  576        ['conv2d_74[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_70 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_70[0][0]'] \n","                                                                                                  \n"," activation_74 (Activation)     (None, 17, 17, 192)  0           ['batch_normalization_74[0][0]'] \n","                                                                                                  \n"," conv2d_71 (Conv2D)             (None, 8, 8, 320)    552960      ['activation_70[0][0]']          \n","                                                                                                  \n"," conv2d_75 (Conv2D)             (None, 8, 8, 192)    331776      ['activation_74[0][0]']          \n","                                                                                                  \n"," batch_normalization_71 (BatchN  (None, 8, 8, 320)   960         ['conv2d_71[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_75 (BatchN  (None, 8, 8, 192)   576         ['conv2d_75[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_71 (Activation)     (None, 8, 8, 320)    0           ['batch_normalization_71[0][0]'] \n","                                                                                                  \n"," activation_75 (Activation)     (None, 8, 8, 192)    0           ['batch_normalization_75[0][0]'] \n","                                                                                                  \n"," max_pooling2d_3 (MaxPooling2D)  (None, 8, 8, 768)   0           ['mixed7[0][0]']                 \n","                                                                                                  \n"," mixed8 (Concatenate)           (None, 8, 8, 1280)   0           ['activation_71[0][0]',          \n","                                                                  'activation_75[0][0]',          \n","                                                                  'max_pooling2d_3[0][0]']        \n","                                                                                                  \n"," conv2d_80 (Conv2D)             (None, 8, 8, 448)    573440      ['mixed8[0][0]']                 \n","                                                                                                  \n"," batch_normalization_80 (BatchN  (None, 8, 8, 448)   1344        ['conv2d_80[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_80 (Activation)     (None, 8, 8, 448)    0           ['batch_normalization_80[0][0]'] \n","                                                                                                  \n"," conv2d_77 (Conv2D)             (None, 8, 8, 384)    491520      ['mixed8[0][0]']                 \n","                                                                                                  \n"," conv2d_81 (Conv2D)             (None, 8, 8, 384)    1548288     ['activation_80[0][0]']          \n","                                                                                                  \n"," batch_normalization_77 (BatchN  (None, 8, 8, 384)   1152        ['conv2d_77[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_81 (BatchN  (None, 8, 8, 384)   1152        ['conv2d_81[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_77 (Activation)     (None, 8, 8, 384)    0           ['batch_normalization_77[0][0]'] \n","                                                                                                  \n"," activation_81 (Activation)     (None, 8, 8, 384)    0           ['batch_normalization_81[0][0]'] \n","                                                                                                  \n"," conv2d_78 (Conv2D)             (None, 8, 8, 384)    442368      ['activation_77[0][0]']          \n","                                                                                                  \n"," conv2d_79 (Conv2D)             (None, 8, 8, 384)    442368      ['activation_77[0][0]']          \n","                                                                                                  \n"," conv2d_82 (Conv2D)             (None, 8, 8, 384)    442368      ['activation_81[0][0]']          \n","                                                                                                  \n"," conv2d_83 (Conv2D)             (None, 8, 8, 384)    442368      ['activation_81[0][0]']          \n","                                                                                                  \n"," average_pooling2d_7 (AveragePo  (None, 8, 8, 1280)  0           ['mixed8[0][0]']                 \n"," oling2D)                                                                                         \n","                                                                                                  \n"," conv2d_76 (Conv2D)             (None, 8, 8, 320)    409600      ['mixed8[0][0]']                 \n","                                                                                                  \n"," batch_normalization_78 (BatchN  (None, 8, 8, 384)   1152        ['conv2d_78[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_79 (BatchN  (None, 8, 8, 384)   1152        ['conv2d_79[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_82 (BatchN  (None, 8, 8, 384)   1152        ['conv2d_82[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_83 (BatchN  (None, 8, 8, 384)   1152        ['conv2d_83[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," conv2d_84 (Conv2D)             (None, 8, 8, 192)    245760      ['average_pooling2d_7[0][0]']    \n","                                                                                                  \n"," batch_normalization_76 (BatchN  (None, 8, 8, 320)   960         ['conv2d_76[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_78 (Activation)     (None, 8, 8, 384)    0           ['batch_normalization_78[0][0]'] \n","                                                                                                  \n"," activation_79 (Activation)     (None, 8, 8, 384)    0           ['batch_normalization_79[0][0]'] \n","                                                                                                  \n"," activation_82 (Activation)     (None, 8, 8, 384)    0           ['batch_normalization_82[0][0]'] \n","                                                                                                  \n"," activation_83 (Activation)     (None, 8, 8, 384)    0           ['batch_normalization_83[0][0]'] \n","                                                                                                  \n"," batch_normalization_84 (BatchN  (None, 8, 8, 192)   576         ['conv2d_84[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_76 (Activation)     (None, 8, 8, 320)    0           ['batch_normalization_76[0][0]'] \n","                                                                                                  \n"," mixed9_0 (Concatenate)         (None, 8, 8, 768)    0           ['activation_78[0][0]',          \n","                                                                  'activation_79[0][0]']          \n","                                                                                                  \n"," concatenate (Concatenate)      (None, 8, 8, 768)    0           ['activation_82[0][0]',          \n","                                                                  'activation_83[0][0]']          \n","                                                                                                  \n"," activation_84 (Activation)     (None, 8, 8, 192)    0           ['batch_normalization_84[0][0]'] \n","                                                                                                  \n"," mixed9 (Concatenate)           (None, 8, 8, 2048)   0           ['activation_76[0][0]',          \n","                                                                  'mixed9_0[0][0]',               \n","                                                                  'concatenate[0][0]',            \n","                                                                  'activation_84[0][0]']          \n","                                                                                                  \n"," conv2d_89 (Conv2D)             (None, 8, 8, 448)    917504      ['mixed9[0][0]']                 \n","                                                                                                  \n"," batch_normalization_89 (BatchN  (None, 8, 8, 448)   1344        ['conv2d_89[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_89 (Activation)     (None, 8, 8, 448)    0           ['batch_normalization_89[0][0]'] \n","                                                                                                  \n"," conv2d_86 (Conv2D)             (None, 8, 8, 384)    786432      ['mixed9[0][0]']                 \n","                                                                                                  \n"," conv2d_90 (Conv2D)             (None, 8, 8, 384)    1548288     ['activation_89[0][0]']          \n","                                                                                                  \n"," batch_normalization_86 (BatchN  (None, 8, 8, 384)   1152        ['conv2d_86[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_90 (BatchN  (None, 8, 8, 384)   1152        ['conv2d_90[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_86 (Activation)     (None, 8, 8, 384)    0           ['batch_normalization_86[0][0]'] \n","                                                                                                  \n"," activation_90 (Activation)     (None, 8, 8, 384)    0           ['batch_normalization_90[0][0]'] \n","                                                                                                  \n"," conv2d_87 (Conv2D)             (None, 8, 8, 384)    442368      ['activation_86[0][0]']          \n","                                                                                                  \n"," conv2d_88 (Conv2D)             (None, 8, 8, 384)    442368      ['activation_86[0][0]']          \n","                                                                                                  \n"," conv2d_91 (Conv2D)             (None, 8, 8, 384)    442368      ['activation_90[0][0]']          \n","                                                                                                  \n"," conv2d_92 (Conv2D)             (None, 8, 8, 384)    442368      ['activation_90[0][0]']          \n","                                                                                                  \n"," average_pooling2d_8 (AveragePo  (None, 8, 8, 2048)  0           ['mixed9[0][0]']                 \n"," oling2D)                                                                                         \n","                                                                                                  \n"," conv2d_85 (Conv2D)             (None, 8, 8, 320)    655360      ['mixed9[0][0]']                 \n","                                                                                                  \n"," batch_normalization_87 (BatchN  (None, 8, 8, 384)   1152        ['conv2d_87[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_88 (BatchN  (None, 8, 8, 384)   1152        ['conv2d_88[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_91 (BatchN  (None, 8, 8, 384)   1152        ['conv2d_91[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," batch_normalization_92 (BatchN  (None, 8, 8, 384)   1152        ['conv2d_92[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," conv2d_93 (Conv2D)             (None, 8, 8, 192)    393216      ['average_pooling2d_8[0][0]']    \n","                                                                                                  \n"," batch_normalization_85 (BatchN  (None, 8, 8, 320)   960         ['conv2d_85[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_87 (Activation)     (None, 8, 8, 384)    0           ['batch_normalization_87[0][0]'] \n","                                                                                                  \n"," activation_88 (Activation)     (None, 8, 8, 384)    0           ['batch_normalization_88[0][0]'] \n","                                                                                                  \n"," activation_91 (Activation)     (None, 8, 8, 384)    0           ['batch_normalization_91[0][0]'] \n","                                                                                                  \n"," activation_92 (Activation)     (None, 8, 8, 384)    0           ['batch_normalization_92[0][0]'] \n","                                                                                                  \n"," batch_normalization_93 (BatchN  (None, 8, 8, 192)   576         ['conv2d_93[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_85 (Activation)     (None, 8, 8, 320)    0           ['batch_normalization_85[0][0]'] \n","                                                                                                  \n"," mixed9_1 (Concatenate)         (None, 8, 8, 768)    0           ['activation_87[0][0]',          \n","                                                                  'activation_88[0][0]']          \n","                                                                                                  \n"," concatenate_1 (Concatenate)    (None, 8, 8, 768)    0           ['activation_91[0][0]',          \n","                                                                  'activation_92[0][0]']          \n","                                                                                                  \n"," activation_93 (Activation)     (None, 8, 8, 192)    0           ['batch_normalization_93[0][0]'] \n","                                                                                                  \n"," mixed10 (Concatenate)          (None, 8, 8, 2048)   0           ['activation_85[0][0]',          \n","                                                                  'mixed9_1[0][0]',               \n","                                                                  'concatenate_1[0][0]',          \n","                                                                  'activation_93[0][0]']          \n","                                                                                                  \n"," global_average_pooling2d (Glob  (None, 2048)        0           ['mixed10[0][0]']                \n"," alAveragePooling2D)                                                                              \n","                                                                                                  \n"," batch_normalization_94 (BatchN  (None, 2048)        8192        ['global_average_pooling2d[0][0]'\n"," ormalization)                                                   ]                                \n","                                                                                                  \n"," dropout (Dropout)              (None, 2048)         0           ['batch_normalization_94[0][0]'] \n","                                                                                                  \n"," dense (Dense)                  (None, 512)          1049088     ['dropout[0][0]']                \n","                                                                                                  \n"," dropout_1 (Dropout)            (None, 512)          0           ['dense[0][0]']                  \n","                                                                                                  \n"," dense_1 (Dense)                (None, 2)            1026        ['dropout_1[0][0]']              \n","                                                                                                  \n","==================================================================================================\n","Total params: 22,861,090\n","Trainable params: 9,554,626\n","Non-trainable params: 13,306,464\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["# call_backs_InceptionV3 = Callbacks(\"InceptionV3_Humerus_FD_2\") \n","\n","# Model_InceptionV3.fit(\n","#     x = train_ds,\n","#     epochs = EPOCHS,\n","#     validation_data = val_ds,\n","#     validation_freq = 1,\n","#     callbacks = call_backs_InceptionV3\n","# )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"xAxU7LLPOSSq","executionInfo":{"status":"error","timestamp":1675951779506,"user_tz":-360,"elapsed":1176483,"user":{"displayName":"Neloy.","userId":"12580598278832678789"}},"outputId":"a429888b-1324-4fa8-e144-fae2cdab8ecb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","152/152 [==============================] - ETA: 0s - loss: 0.6625 - accuracy: 0.7684\n","Epoch 1: val_accuracy improved from -inf to 0.85714, saving model to /gdrive/MyDrive/BoneFractureWork/Saved_models/New/Checkpoints/InceptionV3_Humerus_FD_2/2023_02_09-13_50_02.hdf5\n","152/152 [==============================] - 74s 452ms/step - loss: 0.6625 - accuracy: 0.7684 - val_loss: 0.3415 - val_accuracy: 0.8571 - lr: 1.0000e-04\n","Epoch 2/30\n","152/152 [==============================] - ETA: 0s - loss: 0.2820 - accuracy: 0.9060\n","Epoch 2: val_accuracy improved from 0.85714 to 0.90062, saving model to /gdrive/MyDrive/BoneFractureWork/Saved_models/New/Checkpoints/InceptionV3_Humerus_FD_2/2023_02_09-13_50_02.hdf5\n","152/152 [==============================] - 70s 460ms/step - loss: 0.2820 - accuracy: 0.9060 - val_loss: 0.2579 - val_accuracy: 0.9006 - lr: 1.0000e-04\n","Epoch 3/30\n","152/152 [==============================] - ETA: 0s - loss: 0.1143 - accuracy: 0.9649\n","Epoch 3: val_accuracy improved from 0.90062 to 0.90683, saving model to /gdrive/MyDrive/BoneFractureWork/Saved_models/New/Checkpoints/InceptionV3_Humerus_FD_2/2023_02_09-13_50_02.hdf5\n","152/152 [==============================] - 71s 465ms/step - loss: 0.1143 - accuracy: 0.9649 - val_loss: 0.2773 - val_accuracy: 0.9068 - lr: 1.0000e-04\n","Epoch 4/30\n","152/152 [==============================] - ETA: 0s - loss: 0.0481 - accuracy: 0.9850\n","Epoch 4: val_accuracy did not improve from 0.90683\n","152/152 [==============================] - 68s 443ms/step - loss: 0.0481 - accuracy: 0.9850 - val_loss: 0.3803 - val_accuracy: 0.8944 - lr: 1.0000e-04\n","Epoch 5/30\n","152/152 [==============================] - ETA: 0s - loss: 0.0333 - accuracy: 0.9907\n","Epoch 5: val_accuracy improved from 0.90683 to 0.91615, saving model to /gdrive/MyDrive/BoneFractureWork/Saved_models/New/Checkpoints/InceptionV3_Humerus_FD_2/2023_02_09-13_50_02.hdf5\n","152/152 [==============================] - 70s 459ms/step - loss: 0.0333 - accuracy: 0.9907 - val_loss: 0.3233 - val_accuracy: 0.9161 - lr: 1.0000e-04\n","Epoch 6/30\n","152/152 [==============================] - ETA: 0s - loss: 0.0208 - accuracy: 0.9944\n","Epoch 6: val_accuracy did not improve from 0.91615\n","152/152 [==============================] - 67s 440ms/step - loss: 0.0208 - accuracy: 0.9944 - val_loss: 0.5325 - val_accuracy: 0.9130 - lr: 1.0000e-04\n","Epoch 7/30\n","152/152 [==============================] - ETA: 0s - loss: 0.0283 - accuracy: 0.9915\n","Epoch 7: val_accuracy did not improve from 0.91615\n","152/152 [==============================] - 68s 446ms/step - loss: 0.0283 - accuracy: 0.9915 - val_loss: 0.8752 - val_accuracy: 0.8354 - lr: 1.0000e-04\n","Epoch 8/30\n","152/152 [==============================] - ETA: 0s - loss: 0.0376 - accuracy: 0.9876\n","Epoch 8: val_accuracy did not improve from 0.91615\n","152/152 [==============================] - 65s 425ms/step - loss: 0.0376 - accuracy: 0.9876 - val_loss: 0.5719 - val_accuracy: 0.8913 - lr: 1.0000e-04\n","Epoch 9/30\n","152/152 [==============================] - ETA: 0s - loss: 0.0191 - accuracy: 0.9939\n","Epoch 9: val_accuracy improved from 0.91615 to 0.92547, saving model to /gdrive/MyDrive/BoneFractureWork/Saved_models/New/Checkpoints/InceptionV3_Humerus_FD_2/2023_02_09-13_50_02.hdf5\n","152/152 [==============================] - 68s 443ms/step - loss: 0.0191 - accuracy: 0.9939 - val_loss: 0.4054 - val_accuracy: 0.9255 - lr: 1.0000e-04\n","Epoch 10/30\n","152/152 [==============================] - ETA: 0s - loss: 0.0261 - accuracy: 0.9924\n","Epoch 10: val_accuracy did not improve from 0.92547\n","152/152 [==============================] - 65s 426ms/step - loss: 0.0261 - accuracy: 0.9924 - val_loss: 0.4603 - val_accuracy: 0.9006 - lr: 1.0000e-04\n","Epoch 11/30\n","152/152 [==============================] - ETA: 0s - loss: 0.0144 - accuracy: 0.9957\n","Epoch 11: val_accuracy did not improve from 0.92547\n","152/152 [==============================] - 64s 420ms/step - loss: 0.0144 - accuracy: 0.9957 - val_loss: 0.4324 - val_accuracy: 0.9068 - lr: 2.0000e-05\n","Epoch 12/30\n","152/152 [==============================] - ETA: 0s - loss: 0.0061 - accuracy: 0.9982\n","Epoch 12: val_accuracy did not improve from 0.92547\n","152/152 [==============================] - 65s 427ms/step - loss: 0.0061 - accuracy: 0.9982 - val_loss: 0.4165 - val_accuracy: 0.9193 - lr: 2.0000e-05\n","Epoch 13/30\n","152/152 [==============================] - ETA: 0s - loss: 0.0065 - accuracy: 0.9980\n","Epoch 13: val_accuracy did not improve from 0.92547\n","152/152 [==============================] - 65s 426ms/step - loss: 0.0065 - accuracy: 0.9980 - val_loss: 0.4712 - val_accuracy: 0.9006 - lr: 2.0000e-05\n","Epoch 14/30\n","152/152 [==============================] - ETA: 0s - loss: 0.0036 - accuracy: 0.9994\n","Epoch 14: val_accuracy did not improve from 0.92547\n","152/152 [==============================] - 67s 441ms/step - loss: 0.0036 - accuracy: 0.9994 - val_loss: 0.4563 - val_accuracy: 0.9037 - lr: 2.0000e-05\n","Epoch 15/30\n","152/152 [==============================] - ETA: 0s - loss: 0.0024 - accuracy: 0.9995\n","Epoch 15: val_accuracy did not improve from 0.92547\n","152/152 [==============================] - 65s 426ms/step - loss: 0.0024 - accuracy: 0.9995 - val_loss: 0.4397 - val_accuracy: 0.9130 - lr: 2.0000e-05\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-50-dce597b7233c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mcall_backs_InceptionV3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCallbacks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"InceptionV3_Humerus_FD_2\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m Model_InceptionV3.fit(\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_ds\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mEPOCHS\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1395\u001b[0m       \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1396\u001b[0m       \u001b[0;32mfor\u001b[0m \u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterator\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menumerate_epochs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1397\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_metrics\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1398\u001b[0m         \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_epoch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1399\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcatch_stop_iteration\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["# File_path = \"/gdrive/MyDrive/BoneFractureWork/Saved_models/New/Models/InceptionV3_Humerus_FD_2/2023_02_09-14_10_21.h5\"\n","File_path = \"/gdrive/MyDrive/BoneFractureWork/Saved_models/New/Models/InceptionV3_Humerus_FD/2023_02_09-13_48_22.h5\"\n","Model_InceptionV3 = load_model(File_path)"],"metadata":{"id":"TGGtAa_Ihxsa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Predictions = Model_InceptionV3.predict(test_ds)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hC8h-W6rEqWX","executionInfo":{"status":"ok","timestamp":1677028338259,"user_tz":-360,"elapsed":279922,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"8f048169-a308-433b-a1f0-77cd71d9feec"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["12/12 [==============================] - 280s 22s/step\n"]}]},{"cell_type":"code","source":["def get_labels(predictions):\n","  Y_pred = []\n","  Y_true = []\n","  for i in range(len(predictions)):\n","    Y_pred.append(Unique_labels[predictions[i].argmax()])\n","    Y_true.append(Unique_labels[Y_test[i].argmax()])\n","  return Y_pred, Y_true"],"metadata":{"id":"4vDoeO1ty1wN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Y_pred, Y_true = get_labels(Predictions)"],"metadata":{"id":"N2oWBIXvy9Vl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in range(len(Y_pred)):\n","  if Y_pred[i] != Y_true[i]:\n","    print(f\"{i}\")\n","    print(f\"{X_test[i]}\")\n","    # plt.imshow(preprocess_image(X_test[18]))\n","    # print(\"\\n\")"],"metadata":{"id":"jRaifDzSdZop","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677028536418,"user_tz":-360,"elapsed":3,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"3cb217b8-8898-4d31-e19e-9dd302b6fc77"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["18\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/465.pngnew1.png\n","19\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/326.pngnew4.png\n","24\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/28.pngnew0.png\n","57\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/550.pngnew0.png\n","63\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/89.pngnew3.png\n","82\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/350.pngnew0.png\n","94\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Valid/9.pngnew4.png\n","95\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Valid/58.pngnew1.png\n","101\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/529.pngnew0.png\n","138\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Valid/115.pngnew0.png\n","140\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Valid/70.pngnew3.png\n","161\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/339.pngnew0.png\n","163\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/627.pngnew3.png\n","174\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/51.pngnew4.png\n","181\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/41.pngnew1.png\n","185\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/590.pngnew3.png\n","191\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/547.pngnew0.png\n","192\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/569.pngnew3.png\n","197\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/150.pngnew3.png\n","204\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/98.pngnew3.png\n","232\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Valid/88.pngnew5.png\n","259\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/553.pngnew1.png\n","274\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/652.pngnew2.png\n","294\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/334.pngnew0.png\n","296\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/326.pngnew3.png\n","297\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/83.pngnew3.png\n","302\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/335.pngnew3.png\n","315\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/397.pngnew3.png\n","319\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/565.pngnew5.png\n","332\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/458.pngnew5.png\n","361\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/27.pngnew3.png\n","372\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/83.pngnew1.png\n","376\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/42.pngnew1.png\n","383\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Valid/120.pngnew3.png\n","390\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/157.pngnew3.png\n","406\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/360.pngnew0.png\n","416\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/107.pngnew0.png\n","423\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/233.pngnew5.png\n","432\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/303.pngnew1.png\n","434\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/346.pngnew3.png\n","448\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/478.pngnew0.png\n","454\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/158.pngnew1.png\n","456\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/339.pngnew1.png\n","491\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/605.pngnew0.png\n","504\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/283.pngnew3.png\n","505\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/222.pngnew3.png\n","507\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/269.pngnew1.png\n","550\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/12.pngnew1.png\n","567\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/217.pngnew3.png\n","580\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/398.pngnew1.png\n","605\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/248.pngnew4.png\n","609\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/544.pngnew4.png\n","636\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/99.pngnew3.png\n","640\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/77.pngnew3.png\n","643\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/443.pngnew3.png\n","656\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/192.pngnew3.png\n","659\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/69.pngnew0.png\n","662\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/335.pngnew0.png\n","682\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/42.pngnew3.png\n","687\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Valid/20.pngnew2.png\n","708\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/535.pngnew3.png\n","720\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Valid/131.pngnew0.png\n","721\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Train/68.pngnew0.png\n","724\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/24.pngnew3.png\n","735\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/598.pngnew4.png\n","751\n","/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/356.pngnew1.png\n"]}]},{"cell_type":"code","source":["# save_model(Model_InceptionV3, \"InceptionV3_Humerus_FD_2\")\n","X_test[18]"],"metadata":{"id":"TUi_0LpKZmhK","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1677005597925,"user_tz":-360,"elapsed":4,"user":{"displayName":"Neloy.","userId":"12580598278832678789"}},"outputId":"1adac292-230d-404a-86b3-09e763792536"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/356.pngnew1.png'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":47}]},{"cell_type":"markdown","source":["## **`Model evaluation`**"],"metadata":{"id":"1sOoUWllzxN6"}},{"cell_type":"code","source":["Model_Evaluation( Y_true = Y_true, Y_pred = Y_pred, Labels = Unique_labels, suffix = \"InceptionV3_Humerus\")"],"metadata":{"id":"3CZ14a9F1NnC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677028368941,"user_tz":-360,"elapsed":7,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"c05306cc-a96e-49a5-d2b3-f3ced042f88a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","InceptionV3_Humerus Model's Accuracy: 91.24%\n","\n","                       Fractured Humerus  Non-fractured Humerus\n","Fractured Humerus                    321                     41\n","Non-fractured Humerus                 25                    366\n","\n","InceptionV3_Humerus's Model's classification report: \n","\n","                       precision    recall  f1-score   support\n","\n","    Fractured Humerus       0.93      0.89      0.91       362\n","Non-fractured Humerus       0.90      0.94      0.92       391\n","\n","             accuracy                           0.91       753\n","            macro avg       0.91      0.91      0.91       753\n","         weighted avg       0.91      0.91      0.91       753\n","\n"]}]},{"cell_type":"code","source":["!pip install tf_keras_vis"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YMqHUrmAbOPC","executionInfo":{"status":"ok","timestamp":1677028374493,"user_tz":-360,"elapsed":5556,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"b7b410ff-6271-4706-a7d2-6bfbb6fb98ff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting tf_keras_vis\n","  Downloading tf_keras_vis-0.8.4-py3-none-any.whl (52 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m52.1/52.1 KB\u001b[0m \u001b[31m7.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.8/dist-packages (from tf_keras_vis) (1.7.3)\n","Collecting deprecated\n","  Downloading Deprecated-1.2.13-py2.py3-none-any.whl (9.6 kB)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.8/dist-packages (from tf_keras_vis) (23.0)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.8/dist-packages (from tf_keras_vis) (7.1.2)\n","Requirement already satisfied: imageio in /usr/local/lib/python3.8/dist-packages (from tf_keras_vis) (2.9.0)\n","Requirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.8/dist-packages (from deprecated->tf_keras_vis) (1.14.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.8/dist-packages (from imageio->tf_keras_vis) (1.21.6)\n","Installing collected packages: deprecated, tf_keras_vis\n","Successfully installed deprecated-1.2.13 tf_keras_vis-0.8.4\n"]}]},{"cell_type":"code","source":["misclassified_pos = \"/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Positive/Train/356.pngnew1.png\"\n","misclassified_neg = \"/gdrive/MyDrive/BoneFractureWork/OurDataset/Humerus/Negative/Valid/115.pngnew0.png\""],"metadata":{"id":"OEfeMqgmerpp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plotcall(x, y, label):\n","  plt.gcf().set_size_inches(12, 12)\n","  plt.title(f\"{x}\\n{y} label: {label}\", color = 'red', fontdict = {\"fontsize\" : 15} )\n","  plt.tight_layout()"],"metadata":{"id":"Kc3HbKBBfQ55"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from matplotlib import cm\n","\n","def Ex_AI(O_im, XAI, true, pred, x_model, alp=0.5):\n","  rows=1\n","  columns = 2\n","  fig = plt.figure(figsize=(7,7))\n","  # fig.add_subplot(rows, columns, 1)\n","  # plt.imshow(O_im)\n","  # plotcall('Original image', 'True', true)\n","  # fig.add_subplot(rows, columns, 2)\n","  heat_map = np.uint8(cm.jet(tf.squeeze(XAI))[...,:3]*255)\n","  plt.imshow(O_im)\n","  plt.axis(\"off\")\n","  plt.imshow(heat_map, cmap='plasma', alpha=alp)\n","  # plotcall( x_model+' visualization', 'Predicted', pred)\n","  plt.savefig(\"/content/Humerus_misclassified.png\")\n","  plt.show()"],"metadata":{"id":"oTVd_IRNfCy5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tf_keras_vis.utils.model_modifiers import ReplaceToLinear\n","from tf_keras_vis.utils.scores import CategoricalScore\n","\n","replace2linear = ReplaceToLinear()\n","# score = CategoricalScore(TEST_INT_LABELS[n])\n","score = CategoricalScore(0)"],"metadata":{"id":"U_1JrUDLbOSg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tf_keras_vis.gradcam import Gradcam\n","\n","gradcam = Gradcam(Model_InceptionV3,\n","                  model_modifier=replace2linear,\n","                  clone=True)\n","ind = 185\n","\n","X = preprocess_image(X_test[ind])\n","\n","grad_cam = gradcam(score, X, penultimate_layer=-1)\n","\n","Ex_AI(preprocess_image(X_test[ind]), grad_cam, \"Fractured\", \"Non-fractured\", 'Grad-CAM')\n","# plt.savefig(\"/content/Humerus_classified.png\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":411},"id":"Bkouf8sqbOWI","executionInfo":{"status":"ok","timestamp":1677028863482,"user_tz":-360,"elapsed":3672,"user":{"displayName":"Neloy Barman","userId":"09153523862808853008"}},"outputId":"bbff4b8b-b106-4afa-ffcd-14b8c2ab8dfd"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 504x504 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["\n","\n","!pip install tf_keras_vis\n","\n","def plotcall(x, y, label):\n","  plt.gcf().set_size_inches(12, 12)\n","  plt.title(f\"{x}\\n{y} label: {label}\", color = 'red', fontdict = {\"fontsize\" : 15} )\n","  plt.tight_layout()\n","\n","from matplotlib import cm\n","\n","def Ex_AI(O_im, XAI, true, pred, x_model, alp=0.5):\n","  rows=1\n","  columns = 2\n","  fig = plt.figure(figsize=(7,7))\n","  heat_map = np.uint8(cm.jet(tf.squeeze(XAI))[...,:3]*255)\n","  plt.imshow(O_im)\n","  plt.axis(\"off\")\n","  plt.imshow(heat_map, cmap='plasma', alpha=alp)\n","  plt.show()\n","\n","from tf_keras_vis.utils.model_modifiers import ReplaceToLinear\n","from tf_keras_vis.utils.scores import CategoricalScore\n","\n","replace2linear = ReplaceToLinear()\n","score = CategoricalScore(0)\n","\n","from tf_keras_vis.gradcam import Gradcam\n","\n","gradcam = Gradcam(Model_InceptionV3,\n","                  model_modifier=replace2linear,\n","                  clone=True)\n","\n","grad_cam = gradcam(score, X, penultimate_layer=-1)\n","\n","Ex_AI(preprocess_image(X_test[729]), grad_cam, \"Fractured\", \"Non-fractured\", 'Grad-CAM')\n","plt.savefig(\"/content/Humerus_classified.png\")\n","\n"],"metadata":{"id":"8eCH0or_ijKU"},"execution_count":null,"outputs":[]}]}